{"ast":null,"code":"import _classCallCheck from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michaeldoho/Documents/Dev/capstone/src/Assets/Javascript/Page.js\";\nimport React, { Component } from 'react';\nvar words = ['one', 'two', 'three'];\n\nvar Page =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Page, _Component);\n\n  function Page() {\n    var _this;\n\n    _classCallCheck(this, Page);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Page).call(this));\n\n    _this.removeObject = function (inputWord) {\n      var array = [_this.state.words];\n      var index = array.indexOf(inputWord);\n\n      if (index !== -1) {\n        array.splice(index, 1);\n\n        _this.setState({\n          word: array\n        });\n      }\n\n      handlekey = function handlekey(event) {\n        if (event.key === 'Enter') {\n          console.log('worked');\n        }\n\n        var inputWord = _this.input.current.value;\n        console.log(inputWord);\n        removeObject();\n      }; //     let newWords = () => { for( let i = words.length-1; i>=0; i--) {\n      //         if( words[i] === inputWord ) {\n      //             words.splice(i, 1);\n      //             console.log(newWords)\n      //         }\n      //     }\n      // }\n\n    };\n\n    _this.input = React.createRef();\n    _this.state = {\n      words: []\n    };\n    return _this;\n  }\n\n  _createClass(Page, [{\n    key: \"render\",\n    // removePeople(e) {\n    //     var array = [...this.state.people]; // make a separate copy of the array\n    //     var index = array.indexOf(e.target.value)\n    //     if (index !== -1) {\n    //       array.splice(index, 1);\n    //       this.setState({people: array});\n    //     }\n    //   },\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, words.map(function (item) {\n        return React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, item);\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        onKeyPress: this.handlekey,\n        ref: this.input,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Page;\n}(Component); //grab the input value and check if it is inside the words array\n//have to loop and do a comparason \n// if found use filter or push the values you want to keep into a new array\n//setInterval\n//display none\n\n\nexport { Page as default };","map":{"version":3,"sources":["/Users/michaeldoho/Documents/Dev/capstone/src/Assets/Javascript/Page.js"],"names":["React","Component","words","Page","removeObject","inputWord","array","state","index","indexOf","splice","setState","word","handlekey","event","key","console","log","input","current","value","createRef","map","item"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,IAAMC,KAAK,GAAG,CACV,KADU,EAEV,KAFU,EAGV,OAHU,CAAd;;IAMqBC,I;;;;;AACjB,kBAAa;AAAA;;AAAA;;AACT;;AADS,UAQbC,YARa,GAQE,UAACC,SAAD,EAAe;AAC1B,UAAIC,KAAK,GAAG,CAAC,MAAKC,KAAL,CAAWL,KAAZ,CAAZ;AACA,UAAIM,KAAK,GAAGF,KAAK,CAACG,OAAN,CAAcJ,SAAd,CAAZ;;AACA,UAAGG,KAAK,KAAK,CAAC,CAAd,EAAiB;AACbF,QAAAA,KAAK,CAACI,MAAN,CAAaF,KAAb,EAAoB,CAApB;;AACA,cAAKG,QAAL,CAAc;AAACC,UAAAA,IAAI,EAACN;AAAN,SAAd;AACH;;AAELO,MAAAA,SAAS,GAAG,mBAACC,KAAD,EAAW;AACnB,YAAGA,KAAK,CAACC,GAAN,KAAc,OAAjB,EAAyB;AACrBC,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH;;AAED,YAAIZ,SAAS,GAAG,MAAKa,KAAL,CAAWC,OAAX,CAAmBC,KAAnC;AAEAJ,QAAAA,OAAO,CAACC,GAAR,CAAYZ,SAAZ;AAEAD,QAAAA,YAAY;AAGX,OAZL,CAR8B,CAsB9B;AACA;AACA;AACA;AACA;AACA;AAEA;;AACH,KAtCgB;;AAET,UAAKc,KAAL,GAAYlB,KAAK,CAACqB,SAAN,EAAZ;AACA,UAAKd,KAAL,GAAa;AACTL,MAAAA,KAAK,EAAC;AADG,KAAb;AAHS;AAOZ;;;;AAiCL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6BAEa;AAIT,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,KAAK,CAACoB,GAAN,CAAU,UAAAC,IAAI,EAAG;AACd,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKA,IAAL,CAAP;AACH,OAFA,CADH,EAIE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,UAAU,EAAG,KAAKV,SAArC;AAAiD,QAAA,GAAG,EAAE,KAAKK,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,CADF;AAQD;;;;EA9D+BjB,S,GAiElC;AAEA;AAEA;AAEA;AAEA;;;SAzEqBE,I","sourcesContent":["import React, { Component } from 'react'\n\nconst words = [\n    'one',\n    'two',\n    'three'\n];\n\nexport default class Page extends Component {\n    constructor(){\n        super();\n        this.input =React.createRef();\n        this.state = { \n            words:[]\n        }\n        \n    }\n    removeObject = (inputWord) => {\n        let array = [this.state.words];\n        let index = array.indexOf(inputWord)\n        if(index !== -1) {\n            array.splice(index, 1);\n            this.setState({word:array});\n        }\n\n    handlekey = (event) => {\n        if(event.key === 'Enter'){\n            console.log('worked')\n        }\n        \n        let inputWord = this.input.current.value;\n        \n        console.log(inputWord)\n\n        removeObject()\n        \n        \n        }\n\n    //     let newWords = () => { for( let i = words.length-1; i>=0; i--) {\n    //         if( words[i] === inputWord ) {\n    //             words.splice(i, 1);\n    //             console.log(newWords)\n    //         }\n    //     }\n\n    // }\n};\n\n// removePeople(e) {\n//     var array = [...this.state.people]; // make a separate copy of the array\n//     var index = array.indexOf(e.target.value)\n//     if (index !== -1) {\n//       array.splice(index, 1);\n//       this.setState({people: array});\n//     }\n//   },\n\n    render() {\n        \n\n        \n    return (\n      <div>\n        {words.map(item =>{\n            return <h1>{item}</h1>\n        })}\n        <input type='text' onKeyPress={ this.handlekey } ref={this.input} />\n      </div>\n    )\n  }\n}\n\n//grab the input value and check if it is inside the words array\n\n//have to loop and do a comparason \n\n// if found use filter or push the values you want to keep into a new array\n\n//setInterval\n\n//display none"]},"metadata":{},"sourceType":"module"}