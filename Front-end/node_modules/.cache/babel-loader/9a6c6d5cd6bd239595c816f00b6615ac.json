{"ast":null,"code":"import _defineProperty from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michaeldoho/Documents/Dev/capstone/src/Assets/Javascript/Page.js\";\nimport React, { Component } from 'react';\nvar words = [];\n\nvar Page =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Page, _Component);\n\n  function Page() {\n    var _this;\n\n    _classCallCheck(this, Page);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Page).call(this));\n\n    _this.handlekey = function (e) {\n      e.preventDefault();\n      var inputWord = _this.input.current.value;\n\n      var newArray = _this.state.words.filter(function (e) {\n        return e !== inputWord;\n      });\n\n      console.log(inputWord);\n      console.log(newArray);\n\n      _this.setState({\n        words: newArray,\n        inputWord: \"\"\n      });\n    };\n\n    _this.input = React.createRef();\n    _this.state = {\n      words: ['one', 'two', 'three']\n    };\n    return _this;\n  }\n\n  _createClass(Page, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this,\n          _React$createElement;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, this.state.words.map(function (item) {\n        return React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, item);\n      }), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          return _this2.handlekey(event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"input\", (_React$createElement = {\n        type: \"reset\"\n      }, _defineProperty(_React$createElement, \"type\", \"text\"), _defineProperty(_React$createElement, \"ref\", this.input), _defineProperty(_React$createElement, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement))));\n    }\n  }]);\n\n  return Page;\n}(Component); //grab the input value and check if it is inside the words array\n//have to loop and do a comparason \n// if found use filter or push the values you want to keep into a new array\n//setInterval\n//display none\n\n\nexport { Page as default };","map":{"version":3,"sources":["/Users/michaeldoho/Documents/Dev/capstone/src/Assets/Javascript/Page.js"],"names":["React","Component","words","Page","handlekey","e","preventDefault","inputWord","input","current","value","newArray","state","filter","console","log","setState","createRef","map","item","event"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,IAAMC,KAAK,GAAG,EAAd;;IAIqBC,I;;;;;AACjB,kBAAa;AAAA;;AAAA;;AACT;;AADS,UAabC,SAba,GAaD,UAACC,CAAD,EAAO;AACfA,MAAAA,CAAC,CAACC,cAAF;AACA,UAAIC,SAAS,GAAG,MAAKC,KAAL,CAAWC,OAAX,CAAmBC,KAAnC;;AAEA,UAAIC,QAAQ,GAAG,MAAKC,KAAL,CAAWV,KAAX,CAAiBW,MAAjB,CAAwB,UAAAR,CAAC;AAAA,eAAIA,CAAC,KAAKE,SAAV;AAAA,OAAzB,CAAf;;AACQO,MAAAA,OAAO,CAACC,GAAR,CAAYR,SAAZ;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;;AACA,YAAKK,QAAL,CAAc;AACVd,QAAAA,KAAK,EAAES,QADG;AAEVJ,QAAAA,SAAS,EAAE;AAFD,OAAd;AAKf,KAzBgB;;AAET,UAAKC,KAAL,GAAYR,KAAK,CAACiB,SAAN,EAAZ;AACA,UAAKL,KAAL,GAAa;AACTV,MAAAA,KAAK,EAAC,CACN,KADM,EAEN,KAFM,EAGN,OAHM;AADG,KAAb;AAHS;AAWZ;;;;6BAeQ;AAAA;AAAA;;AACT,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKU,KAAL,CAAWV,KAAX,CAAiBgB,GAAjB,CAAqB,UAAAC,IAAI,EAAG;AACzB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKA,IAAL,CAAP;AACH,OAFA,CADH,EAIE;AAAM,QAAA,QAAQ,EAAE,kBAACC,KAAD;AAAA,iBAAS,MAAI,CAAChB,SAAL,CAAegB,KAAf,CAAT;AAAA,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,IAAI,EAAE;AAAb,uDAA0B,MAA1B,gDAAsC,KAAKZ,KAA3C;AAAA;AAAA;AAAA,uFADJ,CAJF,CADF;AAUD;;;;EAtC+BP,S,GAyClC;AAEA;AAEA;AAEA;AAEA;;;SAjDqBE,I","sourcesContent":["import React, { Component } from 'react'\n\nconst words = [\n    \n];\n\nexport default class Page extends Component {\n    constructor(){\n        super();\n        this.input =React.createRef();\n        this.state = { \n            words:[\n            'one',\n            'two',\n            'three']\n        }\n\n        \n    }\n\n    handlekey = (e) => {\n        e.preventDefault()\n        let inputWord = this.input.current.value;\n\n        let newArray = this.state.words.filter(e => e !== inputWord);\n                console.log(inputWord);\n                console.log(newArray)\n                this.setState({\n                    words: newArray, \n                    inputWord: \"\"\n                }) \n                \n};\n    render() {      \n    return (\n      <div>\n        {this.state.words.map(item =>{\n            return <h1>{item}</h1>\n        })}\n        <form onSubmit={(event)=>this.handlekey(event)}>\n            <input type =\"reset\" type='text' ref={this.input} />\n        </form>\n      </div>\n    )\n  }\n}\n\n//grab the input value and check if it is inside the words array\n\n//have to loop and do a comparason \n\n// if found use filter or push the values you want to keep into a new array\n\n//setInterval\n\n//display none\n\n"]},"metadata":{},"sourceType":"module"}