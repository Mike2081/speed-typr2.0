{"ast":null,"code":"import _classCallCheck from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michaeldoho/Documents/Dev/capstone/src/Assets/Javascript/Page.js\";\nimport React, { Component } from 'react';\n\nvar Page =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Page, _Component);\n\n  function Page() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Page);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Page)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handlekey = function (event) {\n      if (event.key === 'Enter') {\n        console.log('worked');\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Page, [{\n    key: \"render\",\n    value: function render() {\n      var words = ['one', 'two', 'three'];\n      words.map(function (item) {\n        return React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }, item);\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, words.map(function (item) {\n        return React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, item);\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        onKeyPress: this.handleKey,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Page;\n}(Component); //grab the input value and check if it is inside the words array\n//have to loop and do a comparason \n// if found use filter or push the values you want to keep into a new array\n\n\nexport { Page as default };","map":{"version":3,"sources":["/Users/michaeldoho/Documents/Dev/capstone/src/Assets/Javascript/Page.js"],"names":["React","Component","Page","handlekey","event","key","console","log","words","map","item","handleKey"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAGqBC,I;;;;;;;;;;;;;;;;;;UAEjBC,S,GAAY,UAACC,KAAD,EAAW;AACnB,UAAGA,KAAK,CAACC,GAAN,KAAc,OAAjB,EAAyB;AACrBC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH;AAEJ,K;;;;;;;6BAEQ;AACL,UAAMC,KAAK,GAAG,CACV,KADU,EAEV,KAFU,EAGV,OAHU,CAAd;AAMAA,MAAAA,KAAK,CAACC,GAAN,CAAU,UAAAC,IAAI,EAAG;AACb,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKA,IAAL,CAAP;AACH,OAFD;AAMJ,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGF,KAAK,CAACC,GAAN,CAAU,UAAAC,IAAI,EAAG;AACd,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKA,IAAL,CAAP;AACH,OAFA,CADH,EAIE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,UAAU,EAAG,KAAKC,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,CADF;AAQD;;;;EA9B+BV,S,GAiClC;AAEA;AAEA;;;SArCqBC,I","sourcesContent":["import React, { Component } from 'react'\n\n\nexport default class Page extends Component {\n\n    handlekey = (event) => {\n        if(event.key === 'Enter'){\n            console.log('worked')\n        }\n    \n    };\n\n    render() {\n        const words = [\n            'one',\n            'two',\n            'three'\n        ];\n\n        words.map(item =>{\n            return <h1>{item}</h1>\n        });\n\n\n        \n    return (\n      <div>\n        {words.map(item =>{\n            return <h1>{item}</h1>\n        })}\n        <input type='text' onKeyPress={ this.handleKey} />\n      </div>\n    )\n  }\n}\n\n//grab the input value and check if it is inside the words array\n\n//have to loop and do a comparason \n\n// if found use filter or push the values you want to keep into a new array\n"]},"metadata":{},"sourceType":"module"}