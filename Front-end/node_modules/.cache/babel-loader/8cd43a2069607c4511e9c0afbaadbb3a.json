{"ast":null,"code":"import _classCallCheck from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaeldoho/Documents/Dev/capstone/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michaeldoho/Documents/Dev/capstone/src/Assets/Javascript/Page.js\";\nimport React, { Component } from 'react';\nvar words = ['one', 'two', 'three'];\n\nvar Page =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Page, _Component);\n\n  function Page() {\n    var _this;\n\n    _classCallCheck(this, Page);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Page).call(this));\n\n    _this.handlekey = function (event) {\n      var inputWord = _this.input.current.value;\n\n      if (event.key === 'Enter') {\n        console.log('worked');\n        newWords();\n      }\n\n      console.log(inputWord);\n\n      var newWords = function newWords() {\n        for (var i = words.length - 1; i >= 0; i--) {\n          if (words[i] === inputWord) {\n            console.log(i);\n            words.splice(i, 1);\n          }\n        }\n      }; // componentDidUpdate(prevState){\n      //     if(prevState.words != this.state.words){\n      //     }\n      // }\n\n    };\n\n    _this.input = React.createRef();\n    _this.state = words;\n    return _this;\n  }\n\n  _createClass(Page, [{\n    key: \"render\",\n    //     var array = ['A', 'B', 'C']; // Test\n    // var search_term = 'B';\n    // for (var i=array.length-1; i>=0; i--) {\n    //     if (array[i] === search_term) {\n    //         array.splice(i, 1);\n    //     }\n    // }\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, words.map(function (item) {\n        return React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, item);\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        onKeyPress: this.handlekey,\n        ref: this.input,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Page;\n}(Component); //grab the input value and check if it is inside the words array\n//have to loop and do a comparason \n// if found use filter or push the values you want to keep into a new array\n//setInterval\n//display none\n\n\nexport { Page as default };","map":{"version":3,"sources":["/Users/michaeldoho/Documents/Dev/capstone/src/Assets/Javascript/Page.js"],"names":["React","Component","words","Page","handlekey","event","inputWord","input","current","value","key","console","log","newWords","i","length","splice","createRef","state","map","item"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,IAAMC,KAAK,GAAG,CACV,KADU,EAEV,KAFU,EAGV,OAHU,CAAd;;IAMqBC,I;;;;;AACjB,kBAAa;AAAA;;AAAA;;AACT;;AADS,UAObC,SAPa,GAOD,UAACC,KAAD,EAAW;AACnB,UAAIC,SAAS,GAAG,MAAKC,KAAL,CAAWC,OAAX,CAAmBC,KAAnC;;AACA,UAAGJ,KAAK,CAACK,GAAN,KAAc,OAAjB,EAAyB;AACrBC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAC,QAAAA,QAAQ;AACX;;AAGDF,MAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ;;AAEA,UAAIO,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAE,aAAK,IAAIC,CAAC,GAAGZ,KAAK,CAACa,MAAN,GAAa,CAA1B,EAA6BD,CAAC,IAAE,CAAhC,EAAmCA,CAAC,EAApC,EAAwC;AAC3D,cAAIZ,KAAK,CAACY,CAAD,CAAL,KAAaR,SAAjB,EAA6B;AACzBK,YAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACAZ,YAAAA,KAAK,CAACc,MAAN,CAAaF,CAAb,EAAgB,CAAhB;AACH;AACJ;AAEJ,OAPG,CAVmB,CAkBnB;AACA;AAEA;AACA;;AACH,KA9BY;;AAET,UAAKP,KAAL,GAAYP,KAAK,CAACiB,SAAN,EAAZ;AACA,UAAKC,KAAL,GAAahB,KAAb;AAHS;AAKZ;;;;AA2BL;AACA;AAEA;AACA;AACA;AAEA;AACA;6BAEa;AAIT,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,KAAK,CAACiB,GAAN,CAAU,UAAAC,IAAI,EAAG;AACd,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKA,IAAL,CAAP;AACH,OAFA,CADH,EAIE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,UAAU,EAAG,KAAKhB,SAArC;AAAiD,QAAA,GAAG,EAAE,KAAKG,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,CADF;AAQD;;;;EAvD+BN,S,GA0DlC;AAEA;AAEA;AAEA;AAEA;;;SAlEqBE,I","sourcesContent":["import React, { Component } from 'react'\n\nconst words = [\n    'one',\n    'two',\n    'three'\n];\n\nexport default class Page extends Component {\n    constructor(){\n        super();\n        this.input =React.createRef();\n        this.state = words\n        \n    }\n\n    handlekey = (event) => {\n        let inputWord = this.input.current.value;\n        if(event.key === 'Enter'){\n            console.log('worked')\n            newWords(); \n        }\n        \n        \n        console.log(inputWord)\n\n        let newWords = () => { for( let i = words.length-1; i>=0; i--) {\n            if( words[i] === inputWord ) {\n                console.log(i)\n                words.splice(i, 1);\n            }\n        }\n\n    }\n        // componentDidUpdate(prevState){\n        //     if(prevState.words != this.state.words){\n\n        //     }\n        // }\n    };\n\n//     var array = ['A', 'B', 'C']; // Test\n// var search_term = 'B';\n\n// for (var i=array.length-1; i>=0; i--) {\n//     if (array[i] === search_term) {\n//         array.splice(i, 1);\n        \n//     }\n// }\n\n    render() {\n        \n\n        \n    return (\n      <div>\n        {words.map(item =>{\n            return <h1>{item}</h1>\n        })}\n        <input type='text' onKeyPress={ this.handlekey } ref={this.input} />\n      </div>\n    )\n  }\n}\n\n//grab the input value and check if it is inside the words array\n\n//have to loop and do a comparason \n\n// if found use filter or push the values you want to keep into a new array\n\n//setInterval\n\n//display none"]},"metadata":{},"sourceType":"module"}